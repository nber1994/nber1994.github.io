<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>os on jingtianyou&#39;s blog</title>
    <link>http://nber1994.github.io/tags/os/</link>
    <description>Recent content in os on jingtianyou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://nber1994.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>os-如何查看剩余内存</title>
      <link>http://nber1994.github.io/posts/os-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%89%A9%E4%BD%99%E5%86%85%E5%AD%98/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%89%A9%E4%BD%99%E5%86%85%E5%AD%98/</guid>
      <description>os-如何查看剩余内存 如何查看剩余内存</description>
    </item>
    
    <item>
      <title>os-IPC</title>
      <link>http://nber1994.github.io/posts/os-ipc/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-ipc/</guid>
      <description>os-IPC  进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。IPC的方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。其中 Socket和Streams支持不同主机上的两个进程IPC。
 一、管道  管道，通常指无名管道，是 UNIX 系统IPC最古老的形式。  1、特点：   它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。
  它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）。
  它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。
  2、原型： #include &amp;lt;unistd.h&amp;gt;int pipe(int fd[2]); // 返回值：若成功返回0，失败返回-1 当一个管道建立时，它会创建两个文件描述符：fd[0]为读而打开，fd[1]为写而打开。如下图： 要关闭管道只需将这两个文件描述符关闭即可。
3、例子   单个进程中的管道几乎没有任何用处。所以，通常调用 pipe 的进程接着调用 fork，这样就创建了父进程与子进程之间的 IPC 通道。如下图所示：   若要数据流从父进程流向子进程，则关闭父进程的读端（fd[0]）与子进程的写端（fd[1]）；反之，则可以使数据流从子进程流向父进程。
  #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;unistd.h&amp;gt; int main() { int fd[2]; // 两个文件描述符 	pid_t pid; char buff[20]; if(pipe(fd) &amp;lt; 0) // 创建管道 	printf(&amp;#34;Create Pipe Error!\n&amp;#34;); if((pid = fork()) &amp;lt; 0) // 创建子进程 	printf(&amp;#34;Fork Error!</description>
    </item>
    
    <item>
      <title>os-top</title>
      <link>http://nber1994.github.io/posts/os-top/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-top/</guid>
      <description>os-top 任务队列信息 当前系统时间 系统累计运行时间 当前登录用户 活跃进程数1，5，15分钟 top - 11:47:19 up 298 days, 19:59, 1 user, load average: 0.99, 1.01, 1.03 进程信息 总共进程数 正在运行 休眠进程 停止进程 僵尸进程 Tasks: 175 total, 4 running, 170 sleeping, 1 stopped, 0 zombie CPU信息 用户态占用CPU百分比 内核态占用CPU百分比 改变过优先级的进程百分比 空闲百分比 IO等待百分比 硬中断 软中断 %Cpu(s): 15.9 us, 35.1 sy, 0.0 ni, 49.1 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st 内存状态 物理内存总量 空闲内存总量 使用内存总量 缓存的内存量 KiB Mem : 8009832 total, 225372 free, 662292 used, 7122168 buff/cache swap分区信息 交换区总量 空闲 使用 KiB Swap: 0 total, 0 free, 0 used.</description>
    </item>
    
    <item>
      <title>os-unix-hater-handbook</title>
      <link>http://nber1994.github.io/posts/os-unix-hater-handbook/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-unix-hater-handbook/</guid>
      <description>os-unix-hater-handbook  最近偶尔发现了一本书，叫做unix痛恨者指南。 用了这么久的unix（linus），似乎所有的程序员都在谈论unix（linux），但是却很少有人对unix提出质疑 偶尔读读这样的书也挺有意思的，某些点也引发了我对unix（linux）的思考
 UNIX痛恨者手册 第一章 UNIX——世界上第一个电脑病毒
“伯克利的两项最著名的产品是UNIX和LSD (一种毒品)，我想这不是巧合”
病毒依赖于微小的个体和强大的适应性得以生存。它们并不复杂：它们没有为呼吸，新 陈代谢，肌体活动等功能提供什么，只有足够的DNA或RNA以供繁衍。比如，肺炎病毒比 起它们入侵的细胞要小得多，但它们在每个肺炎流行季节都能够产生新的变种，造成无 数人死亡。
一个好病毒的特点是：
  个头小 病毒做的事情不多，所以不需要很大。有人认为病毒不是生物，只是一些有破坏性的酸 和蛋白质。
  可移植性 病毒经常变异，以便以不同的方式攻击不同的细胞。据说AIDS就是由猴子身上的病毒变 异而成的。
  耗尽寄主的资源
  快速变异
  UNIX具有以上所有优点。在它刚诞生时，很小，功能不多，缺乏真正操作系统所需要的 功能（如文件映射，告诉IO，健壮的文件系统，设备锁，合理的进程间通讯），它的移 植性很好。UNIX耗尽主机的资源，没有系统管理员的时时呵护，UNIX会不断恐慌，core dump，挂起。UNIX不断变异：同一个补丁在一个版本上工作，在另一个版本上就不行。
UNIX是有用户界面的计算机病毒。
标准化那些不一致的 “标准的伟大之处在于它可以有很多” &amp;mdash; Grace Murray Hopper
自从UNIX 80年代开始流行以来，UNIX厂商一直在努力进行UNIX标准化工作。SUN, IBM， HP和DEC在这个他们自己制造的难题上倾注了数百万美元。
为什么UNIX厂商不喜欢UNIX标准化?
许多用户受够了复杂繁多的UNIX，最终只好使用Windows，因为他们的这个UNIX无法支持 那个UNIX上的应用程序。
如果UNIX标准化了，谁还会买SUN的机器呢 第二章 欢迎新用户
欢迎新用户如同用一把上了六颗子弹的左轮枪玩俄罗斯轮盘赌
Ken Thompson 自己设计过一辆汽车。和其他车不同，它没有速度计、汽油计，也没有那 些愚蠢的指示灯讨司机的厌。如果司机犯了什么错误，仪表盘上就会出现一个大大的“ ？”。“有经验的司机，”Thompson说，“应该知道哪儿搞错了。”
计算机系统的新手需要一个友好的系统。至少，一个得体的系统会这样招待自己的客人 ：
与功能有逻辑关系的命令名 对危险命令的小心处理 一致的命令行为和命令行参数解析 易得和易读的在线文档 当命令失败时，给出可理解和有用的错误反馈
在建造UNIX的过程中，从没邀请过住户。来访的都是些戴着安全帽的建筑工人，被安插 在这个破木板房子的各个角落。不幸的是，不仅没有人性因素（human factors）工程师 的参与，而且住户的需要就从来没有被考虑过。所以抽水马桶、中央供暖、窗户等这些 方便设施在后期就很难再添加了。但是建筑师们仍然为UNIX的设计而骄傲，似乎他们并 不介意在一个没有烟火探测器的屋子里睡觉。</description>
    </item>
    
    <item>
      <title>os-一句话</title>
      <link>http://nber1994.github.io/posts/os-%E4%B8%80%E5%8F%A5%E8%AF%9D/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E4%B8%80%E5%8F%A5%E8%AF%9D/</guid>
      <description>os-一句话 一句话
栈的主要功能是实现函数调用 栈的主要功能是实现函数的调用。因此在介绍栈溢出原理之前，需要弄清函数调用时栈空间发生了怎样的变化。每次函数调用时，系统会把函数的返回地址（函数调用指令后紧跟指令的地址），一些关键的寄存器值保存在栈内，函数的实际参数和局部变量（包括数据、结构体、对象等）也会保存在栈内。这些数据统称为函数调用的栈帧，而且是每次函数调用都会有个独立的栈帧，这也为递归函数的实现提供了可能。
http://www.feemic.cn/mooc/icourse163/1002692015 李志军老哥讲义
栈的主要功能是实现函数的调用。因此在介绍栈溢出原理之前，需要弄清函数调用时栈空间发生了怎样的变化。每次函数调用时，系统会把函数的返回地址（函数调用指令后紧跟指令的地址），一些关键的寄存器值保存在栈内，函数的实际参数和局部变量（包括数据、结构体、对象等）也会保存在栈内。这些数据统称为函数调用的栈帧，而且是每次函数调用都会有个独立的栈帧，这也为递归函数的实现提供了可能。
https://www.jianshu.com/p/c1015f5ffa74 https://www.jianshu.com/p/486b0965c296 https://www.jianshu.com/p/aed6067eeac9 阻塞&amp;amp;IO模型
https://blog.csdn.net/u013309870/article/details/75193592 动态规划 http://www.hawstein.com/posts/dp-novice-to-advanced.html 动态规划 https://blog.csdn.net/luyafei_89430/article/details/12971171 进程调度算法
￼ http://blog.codepiano.com/2017/03/01/read-file-from-disk 读写磁盘
￼</description>
    </item>
    
    <item>
      <title>os-内存地址</title>
      <link>http://nber1994.github.io/posts/os-%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80/</guid>
      <description>内存地址 os-大端小端  一个十六进制值为0x01234567 大端法就是数据的高位存在地址的低位 小端法就是数据的低位存在地址的高位 大端法比较适应阅读习惯  os-32&amp;amp;64位系统  32位指的是主线上一次可以传输的信息的位数,可以作为主存寻址地址 32位的机器大概可以存在2^32个地址，即2^32字节的内存（4GB） 64位的机器大概可以存2^64个字节（256TB）   基础知识  一个字节有一个地址，每个地址内的存储顺序是不变的 一个字节一个地址 1字节=8bit 可以容纳两个16进制的值  </description>
    </item>
    
    <item>
      <title>os-内核态用户态的转换</title>
      <link>http://nber1994.github.io/posts/os-%E5%86%85%E6%A0%B8%E6%80%81%E7%94%A8%E6%88%B7%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%86%85%E6%A0%B8%E6%80%81%E7%94%A8%E6%88%B7%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>os-内核态用户态的转换  陷阱  如系统调用，会进入内核态执行系统命令   故障  缺页故障   中断  比如读取磁盘完毕以后，会发送中断信号，调用中断处理程序    </description>
    </item>
    
    <item>
      <title>os-文本处理</title>
      <link>http://nber1994.github.io/posts/os-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</guid>
      <description>os-文本处理 统计日志中出现最多的IP grep -i -o -E &amp;#39;([0-9]{1,3}\.){3}[0-9]{1,3}&amp;#39; log.log | sort -n | uniq -c | sort -n -r | head -10   grep
 -i 忽略大小写 -o 输出匹配部分 -E 正则表达式    sort
 -n 数值排序 -r 倒叙排序    uniq
 -c 显示重复次数    head
 -n 显示前n行    awk命令 log内容
root:x:0:0:root:/root:/usr/bin/zsh daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync # awk命令结构 awk 选项 &amp;#39;条件 动作&amp;#39; 文件 # 例如 awk &amp;#39;{print $0}&amp;#39; log  $0 表示当前行 $n 表示按照分隔符切割后的第几个（默认是空格，制表符） NF 分割了多少个字段 $(NF-n)倒数第几个 -F 设置分隔符  awk -F &amp;#39;:&amp;#39; &amp;#39;{print $0}&amp;#39; log  NR 当前行  awk &amp;#39;{print NR &amp;#34;)&amp;#34; $1}&amp;#39; log 1) root 2) daemon 3) bin 4) sys 5) sync  函数  tolower()：字符转为小写。 length()：返回字符串长度。 substr()：返回子字符串。 rand()：随机数。   条件  $ awk -F &amp;#39;:&amp;#39; &amp;#39;/usr/ {print $1}&amp;#39; demo.</description>
    </item>
    
    <item>
      <title>os-进程</title>
      <link>http://nber1994.github.io/posts/os-%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E8%BF%9B%E7%A8%8B/</guid>
      <description>os-进程 进程和线程之间的区别： 进程之间的关系
进程经典定义 一个执行中程序的实例
进程上下文  同时进程运行依赖其进程运行时的上下文，上下文包括其  代码和数据 打开的文件描述符表 环境变量 运行时栈 通用目的寄存器     进程提供的假象 一个独立的逻辑控制流，好像是独占cpu 一个独立的地址空间，好像是独占主存
并发流 多任务也叫时间分片。每个进程执行它部分逻辑流的一段时间叫做时间分片
私有地址空间 一个进程的常见内存情况  代码段总是从地址0x400000开始的，然后是数据段，然后是堆 内存最高位则是内核内存空间，用户栈是从2^48-1处开始向下延伸的 在用户栈和堆之间存在一块为共享库分配的内存空间  用户模式和内核模式  操作系统必须限制一个进程可以执行的指令和可以访问的内存空间，这种功能是通过控制某个模式位实现的 当设置了模式位时，进程就会运行在内核模式中 进程从用户态进入内核态的唯一方法是诸如中断，陷阱，故障这样的异常 当异常发生时，异常处理程序就会把模式位置为内核模式，当返回到用户程序时，处理器会将模式位置为用户位  调度  内核决定抢占当前进程，并重新开始一个之前被抢占的进程，叫做调度 调度是通过切换进程运行的上下文来进行的  保存当前进程的上下文 恢复新进程的上下文环境 将控制权移交给新的进程    调度的原因  阻塞：如果一个进程因为等待某个事件发生，如读取磁盘，内核可以让进程休眠，切换到另一个进程 中断：所有的机器都有产生周期性定时器中断的机制，通常为1毫秒或10毫秒，定时器终端时，内核可以进行进程调度  一个因为读取磁盘的调度实例  初始时，进程A运行在用户模式，进程调用read命令时，进程A会从用户态切换到内核态，同时内核会把A的内核态切换到B的内核态进程，然后再运行在B的用户态执行 同时陷阱处理程序会通过DMA，不经过cpu，直接将数据从磁盘读取到内存中，读取完毕后，磁盘控制器会向cpu发送一个中断信息 当内核觉得进程B已经执行了足够长的时间时，内核通过切换上下文，将控制权移交给A进程，同时从read的之后的指令开始执行  进程的三种状态  运行 正在cpu执行，或者在等待被执行且最终会被执行 停止 进程执行被挂起，且不会被调度。 终止 进程永远的停止了 三种终止原因：1.收到一个信号 2.从主程序返回 3.exit函数退出  创建子进程  父进程创建子进程时，会拥有和父进程相同的代码段，数据段和用户栈以及文件描述符表 父进程和子进程最大的区别就是PID是不同的  回收子进程  当一个子进程由于某种原因终止时，内核并不会把它立即从系统中清除，而是保持在终止状态下，指到父进程回收 一个已经终止了，但是还未被回收的进程成为僵尸进程 当父进程终止了，内核会安排init进程作为他的孤儿子进程的养父，init进程的PID为1  一号进程是在系统启动时创建的    信号  传送信号到目的进程，分为两个步骤  发送信号 内核通过更新目的进程上下文的某个状态，发送一个信号给目的进程   发送信号的原因有两种： 1.</description>
    </item>
    
    <item>
      <title>os-awk</title>
      <link>http://nber1994.github.io/posts/os-awk/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-awk/</guid>
      <description>os-awk </description>
    </item>
    
    <item>
      <title>os-顿悟</title>
      <link>http://nber1994.github.io/posts/os-%E9%A1%BF%E6%82%9F/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E9%A1%BF%E6%82%9F/</guid>
      <description>os-顿悟 一直以来一直在疑惑，unix中fork函数竟然是使用的是c的内置的函数，我就很搞不懂c语言和操作系统的关系，难道c语言编译器不是运行在操作系统里的吗？ 直到我找到了答案，编译器是早于操作系统的存在，早起的机器其实没有操作系统的概念，开机就是一个代码编译器 所以操作系统其实可以看做一个运行在c基础上的巨大的应用
有趣！ </description>
    </item>
    
    <item>
      <title>os-strace</title>
      <link>http://nber1994.github.io/posts/os-strace/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-strace/</guid>
      <description>os-strace  进程对用户来说就是一个黑盒，strace就是打开这个黑盒子的工具，可以解析出我们需要的调用
 使用实例 strace -tt -T -v -f -e trace=file -o /data/log/strace.log -s 1024 -p 23489  -tt 在每行输出的前面，显示毫秒级别的时间 -T 显示每次系统调用所花费的时间 -v 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。 -f 跟踪目标进程，以及目标进程创建的所有子进程 -e 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称 -o 把strace的输出单独写到指定的文件 -s 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节 -p 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可。
 #跟踪nginx strace -tt -T -f -e trace=file -o /data/log/strace.log -s 1024 ./nginx # -e trace=file 显示和文件访问相关的调用 -e的拓展 要跟踪某个具体的系统调用，-e trace=xxx即可。但有时候我们要跟踪一类系统调用，比如所有和文件名有关的调用、所有和内存分配有关的调用。
如果人工输入每一个具体的系统调用名称，可能容易遗漏。于是strace提供了几类常用的系统调用组合名字。
 -e trace=file 跟踪和文件访问相关的调用(参数中有文件名) -e trace=process 和进程管理相关的调用，比如fork/exec/exit_group -e trace=network 和网络通信相关的调用，比如socket/sendto/connect -e trace=signal 信号发送和处理相关，比如kill/sigaction -e trace=desc 和文件描述符相关，比如write/read/select/epoll等 -e trace=ipc 进程见同学相关，比如shmget等</description>
    </item>
    
    <item>
      <title>os-linux常用命令</title>
      <link>http://nber1994.github.io/posts/os-linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>title: os-linux常用命令 date: 2019-06-03 tags:
 os   os-linux常用命令 top 任务队列信息 当前系统时间 系统累计运行时间 当前登录用户 活跃进程数1，5，15分钟 top - 11:47:19 up 298 days, 19:59, 1 user, load average: 0.99, 1.01, 1.03 进程信息 总共进程数 正在运行 休眠进程 停止进程 僵尸进程 Tasks: 175 total, 4 running, 170 sleeping, 1 stopped, 0 zombie CPU信息 用户态占用CPU百分比 内核态占用CPU百分比 改变过优先级的进程百分比 空闲百分比 IO等待百分比 硬中断 软中断 %Cpu(s): 15.9 us, 35.1 sy, 0.0 ni, 49.1 id, 0.0 wa, 0.0 hi, 0.0 si, 0.</description>
    </item>
    
    <item>
      <title>os-网络IO模型</title>
      <link>http://nber1994.github.io/posts/os-%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</guid>
      <description>os-网络IO模型 IO多路复用 select、poll、epoll之间的区别总结[整理]  select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。 但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。 关于这三种IO多路复用的用法，前面三篇总结写的很清楚，并用服务器回射echo程序进行了测试。连接如下所示：  select：http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html
poll：http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html
epoll：http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html
select实现  select的调用过程如下所示： （1）使用copy_from_user从用户空间拷贝fd_set到内核空间 （2）注册回调函数__pollwait （3）遍历所有fd，调用其对应的poll方法（对于socket，这个poll方法是sock_poll，sock_poll根据情况会调用到tcp_poll,udp_poll或者datagram_poll） （4）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。 （5）__pollwait的主要工作就是把current（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列，对于tcp_poll来说，其等待队列是sk-&amp;gt;sk_sleep（注意把进程挂到等待队列中并不代表进程已经睡眠了）。在设备收到一条消息（网络设备）或填写完文件数据（磁盘设备）后，会唤醒设备等待队列上睡眠的进程，这时current便被唤醒了。 （6）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值。 （7）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout使调用select的进程（也就是current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。 （8）把fd_set从内核空间拷贝到用户空间。  缺点 （1）每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大 （2）同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大 （3）select支持的文件描述符数量太小了，默认是1024
poll实现 　poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构，其他的都差不多。
 关于select和poll的实现分析，可以参考下面几篇博文：  http://blog.csdn.net/lizhiguo0532/article/details/6568964#comments http://blog.csdn.net/lizhiguo0532/article/details/6568968 http://blog.csdn.net/lizhiguo0532/article/details/6568969 http://www.ibm.com/developerworks/cn/linux/l-cn-edntwk/index.html?ca=drs- http://linux.chinaunix.net/techdoc/net/2009/05/03/1109887.shtml    epoll 　epoll既然是对select和poll的改进，就应该能避免上述的三个缺点。那epoll都是怎么解决的呢？在此之前，我们先看一下epoll和select和poll的调用接口上的不同，select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait，
 epoll_create是创建一个epoll句柄； epoll_ctl是注册要监听的事件类型； epoll_wait则是等待事件的产生。  epoll改进  对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。 对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。 对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。  代码对比 /*select的回调函数，将当前进程添加到fd的等待队列上 * 该函数可以看到，是初始化了一个entry的结构，在init_waitqueue_entry函数中，将当前进程设置为了该entry的私有值， * 并且在将唤醒函数绑定 */ static void __pollwait(struct file *filp, wait_queue_head_t *wait_address, poll_table *p) { struct poll_table_entry *entry = poll_get_entry(p); if (!</description>
    </item>
    
    <item>
      <title>os-csip</title>
      <link>http://nber1994.github.io/posts/os-csip/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-csip/</guid>
      <description>os-csip  cs 代码段寄存器 Ip 指令指针寄存器 基地址：偏移地址  在8086pc机中，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存M*16+N单元开始，读取下一条指令
8086cpu工作的过程可以描述如下：  1:从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器 2：IP=IP+所读取指令的长度，从而读取下一条指令 3:执行指令，转到步骤1，重复这个过程  </description>
    </item>
    
    <item>
      <title>os-同步异步阻塞非阻塞</title>
      <link>http://nber1994.github.io/posts/os-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/</guid>
      <description>os-同步异步阻塞非阻塞 同步、异步、阻塞与非阻塞  同步和异步关注的是消息通知的机制 阻塞和非阻塞关注的是等待消息时线程的状态  区分   如果一直在显示的等待消息的到来，同步
  如果经过一个消息通知机制，等待消息则是异步
  在等待消息的时候，如果线程还能做其他事情，则是非阻塞的
  如果除了等待消息，其他什么事情也不能做，则是阻塞的
  同步阻塞 坐等待消息到来，而且什么也不做
  同步非阻塞 坐等待消息的到来，期间还可以做一些其他的事情
  异步阻塞 等待消息的通知，期间并不做其他事情
  异步非阻塞 等待消息的通知，期间还做其他的事情
  举例  下载文件  我盯着下载进度，什么也不敢 一遍夹手指甲，不时的瞄一眼进度条 我什么也不做，等待下载完成叮的一声 我剪指甲，等待叮的一声    区别 同步阻塞形式  效率是最低的， 拿上面的例子来说，就是你专心排队，什么别的事都不做。 实际程序中：就是未对fd 设置O_NONBLOCK标志位的read/write 操作；  异步阻塞形式  如果在银行等待办理业务的人采用的是异步的方式去等待消息被触发（通知），也就是领了一张小纸条，假如在这段时间里他不能离开银行做其它的事情，那么很显然，这个人被阻塞在了这个等待的操作上面； 异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。 比如select 函数，假如传入的最后一个timeout参数为NULL，那么如果所关注的事件没有一个被触发，程序就会一直阻塞在这个select 调用处。 这种方式岂不是很傻  同步非阻塞形式  实际上是效率低下的 想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有，如果把打电话和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的。 很多人会写阻塞的read/write 操作，但是别忘了可以对fd设置O_NONBLOCK 标志位，这样就可以将同步操作变成非阻塞的了。  异步非阻塞形式  效率更高 因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。 比如说，这个人突然发觉自己烟瘾犯了，需要出去抽根烟，于是他告诉大堂经理说，排到我这个号码的时候麻烦到外面通知我一下(注册一个回调函数)，那么他就没有被阻塞在这个等待的操作上面，自然这个就是异步+非阻塞的方式了。 如果使用异步非阻塞的情况，比如aio_*组的操作，当发起一个aio_read操作时，函数会马上返回不会被阻塞，当所关注的事件被触发时会调用之前注册的回调函数进行处理。  ￼ Socket IO的形式是会将接收到的数据先缓存在内核缓冲区上，然后再复制到进程的内存中</description>
    </item>
    
    <item>
      <title>os-存储</title>
      <link>http://nber1994.github.io/posts/os-%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%AD%98%E5%82%A8/</guid>
      <description>存储 存储在不同的存储器的速度 随机访问存储器  静态RAM和动态RAM SRAM既可以在芯片上，也可以在芯片下  访问主存 总线事务  读事务是从主存传输数据到cpu 写事务是从cpu传输数据到主存   Cpu通过系统总线链接I/O桥，主存通过内存总线链接I/O桥
读事务： 1.cpu将地址放在系统总线中，通过I/O桥传给内存总线传递给内存 2.内存感知到内存总线传递来地址，读出地址数据，并传递到内存总线上 3.cpu感受到系统总线传递的数据，并将其复制到寄存器中
写事务： 1.cpu将需要写数据的地址传递给内存，内存读出地址等待数据 2.cpu将数据写入系统总线 3.内存从内存总线拿到数据，写入DRAM中
 DRAM速度比磁盘快10万倍，SRAM比磁盘快100万倍  磁盘  盘面：磁盘是由一些盘面组成的，每个盘面上下都可以使用 磁道：磁道是一组同心圆 扇区：一个磁道分为一组扇区，扇区之前尤一些间隙隔开 柱面：是所有盘面表面到主轴中心距离相等的磁道的集合   磁盘读写 磁盘通过读写头对磁盘进行读写，读写头位于机械臂头部，通过前后摆动进行寻道操作，同一个时刻上，读写头都位于一个柱面
磁盘读写速度  磁盘的读写速度受三个时间影响：  寻道时间+旋转时间+传送时间     访问磁盘  Cpu当前的进程访问磁盘时，会将命令，逻辑块号和内存地址写入到磁盘控制器 磁盘控制器读出数据，直接存入内存相关地址（DMA） 磁盘控制器发出一个中断给cpu  设备可以直接执行写或者读总线事务，而不经过cpu，成为直接内存访问DMA </description>
    </item>
    
    <item>
      <title>os-常见问题</title>
      <link>http://nber1994.github.io/posts/os-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>os-常见问题 1.进程和线程的区别   进程抽象来说 内存空间+逻辑控制流
  线程依附于进程上，拥有相同的内存空间，不同的逻辑控制流，带来很多竞争问题
  特别的进程和线程拥有相同的堆，但是不同的用户栈
  僵尸进程和孤儿进程
  2.线程同步的方式 linux下提供了多种方式来处理线程同步，最常用的是互斥锁、条件变量和信号量。
互斥锁 条件变量 线程A阻塞并等待某个条件的达成才继续执行，基于共享变量实现的
信号量 互斥锁可以看为特殊情况的信号量
信号阻塞，嵌套 3.进程间通信的方式 1.管道pipe匿名管道  管道是半双工的，只能一个方向流动 且只能用于有血缘关系的进程之间（父子或者兄弟进程之间） 单独构成一种文件系统，对于进程而言就是一个文件，但不属于文件系统，是存在于内存中  管道的实质：  实质就是一个内核缓冲区，采用先进先出的方式对数据进行读取和写入，一旦读空或者写满的情况，则会相应的进程等待  局限性：  只能在亲缘关系进程之间 没有名字 缓冲区域是有限的，一般是一页 管道内所传送的是无格式的字节流，所以需要读写双方预定好数据格式 Pipe必须确定对方存在，否则将直接退出 如果写入大于管道的容量，写入将阻塞  2.有名管道FIFO  有名管道为了克服pipe的只能在亲缘进程之间的局限而提出的 有名管道提供了一个路径名与之关联，存在于文件系统中，这样，不同亲缘关系的进程之间也可以借助FIFO进行通信 特别的，有名管道名字存在于文件系统中，但是内容存放在内存中 当对方不在连接时，则会阻塞  3.信号  信号是软件层次上的 对中断机制的一种模拟，是一种异步通信方式 ？？？？？常见信号SIGKILL SIGSTOP SIGTERM SIGHUP 信号的类型  4.消息队列  消息队列是存放在内存中的消息链表 消息队列存放在内核中，只有内核重启或者显示的删除，消息才会被删除 与管道不同的是，消息对列并不需要等待目标进程就绪  5.共享内存  多个进程可直接读写同一块内存区域，是最快的IPC方式 同时由于多个进程同时共享一块内存区域，则需要信号量来保证同步&amp;amp;互斥  6.</description>
    </item>
    
    <item>
      <title>os-并发编程</title>
      <link>http://nber1994.github.io/posts/os-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>os-并发编程 并发编程
现代操作系统提供了三种构造并发程序的方法 1.进程 每个逻辑控制流都是一个进程，由内核来调度和维护，所以控制流之间通信可以采用IPC进程间通信技术
2.I/O多路复用 在这种形式的并发编程中，应用程序在一个进程的向下文中显示的调度自己的逻辑流。逻辑流被模型化为状态机，数据到达后，主程序显示的从一个状态转换为另一个状态。
3.线程 运行在一个单一进程上下文中的逻辑流，由内核进行调度
基于进程的并发编程 如何工作 服务器监听了描述符3， 客户端1连接上以后，服务端分配了fd4给客户端1，并且派生一个子进程， 关闭主进程的fd4,同时在子进程的文件描述符表中，关闭fd3。 父子进程文件描述符表都指向了同一个文件表项。 从此父进程继续接受请求，子进程提供服务 基于进程的并发服务器 优缺点： 优点：进程存在独立的内存空间，这样避免了内存互相覆盖的迷惑 缺点：进程间共享状态十分困难，必须使用IPC（进程间通信），但是IPC一般开销比较高
基于I/O多路复用的并发编程 一个进程某一时刻，只能处理一个事件，为了解决这个问题，可以借助select函数，要求内核将进程挂起，只有在一个或多个I/O事件发生后，才将控制权返回给应用程序
一般实现的逻辑是，将逻辑流模型转化为一个状态机。
I/O多路复用的技术的优劣 优点： 1.相比较基于进程的并发技术，I/O多路复用提供给程序员对程序行为的控制 2.所有的逻辑控制流是在一个进程中的，所以不同的逻辑流可以共享数据十分方便
缺点： 1.编码复杂 2.不能充分利用多核
基于线程的并发编程 可以看为基于进程&amp;amp;IO多路复用的结合
进程就是运行在进程中上下文中的逻辑流.线程是由内核调度的，且每个线程都有其自己的线程上下文，还包括一个唯一的线程ID，栈，栈指针等。所有运行在一个进程里的线程共享改进程的整个虚拟地址空间。
线程与进程的区别
1.线程的上下文比进程的上下文小的多，因而线程的切换比进程的切换更快 2.线程没有严格的父子继承关系，只有主线程和对等线程的区别，一般主线程是进程中第一个线程 3.对等线程池内的对等线程可以杀死或者等待对等线程，且各个线程之间可以共享数据，拥有相同的堆块，但是用户栈确是不同的
线程异步服务的代码实现 主线程等待请求到达，当接收到一个请求后，创建一个对等线程对请求进程处理
基于预线程化的并发服务器 基于预线程化的并发服务器会事先初始化好一个线程池 使用线程提高并发性 线程并发的程序，在多核处理器中常常有很好的性能，因为内核会在多个核上并发的调度线程
并行程序是运行在多个处理器上的并发程序
同步多个线程的方法 控制对共享数据的并发访问，基于一种叫做信号量的特殊类型变量的方法。 信号量是非负整数的全局变量，P操作会将s减一，而V操作会将s加一，且都是原子操作 基于二原信号量的同步也常常成为互斥锁，对互斥锁进行P操作叫做加锁，V操作为解锁
不过对于这种同步方式，开销是十分大的，应该尽可能的避免这种方式</description>
    </item>
    
    <item>
      <title>os-异常控制流</title>
      <link>http://nber1994.github.io/posts/os-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</guid>
      <description>os-异常控制流 异常控制流 异常控制流(ECF) 异常可以分为四种 中断，陷阱，故障，终止 中断 中断时异步的，是处理IO设备的信号，例如正在读取磁盘（DMA）完毕后，发送信号到cpu芯片的一个引脚，这时，cpu会停止当前工作，根据传递来的异常号码查询异常表的异常处理程序，等处理完之后，控制会跳转到中断发生时的下一条命令，程序继续执行
陷阱 陷阱执行完毕之后，也是会返回到发生陷阱时的下一条指令 陷阱最重要的用途就是在用户进程和内核之间提供一个系统调用 用户态进程准备向内核请求服务时，内核允许用户进程通过syscall， 会产生一个异常处理程序的陷阱，对于linux来说系统调用的参数不是通过栈传递的，而是通过寄存器传递的 系统调用&amp;amp;普通函数调用区别 普通调用只在用户态内存中，且只能访问和函数相同的栈 系统调用运行在内核模式中，可以访问内核中的栈 故障 故障是由错误情况引起的，会将控制转移到故障处理程序处理，得到的结果可能是终止程序或者返回引起故障的地方重新执行 一个比较经典的例子是缺页异常 当指令引用一个虚拟内存地址时，对应的物理地址不存在主存中，就会触发故障处理程序，从磁盘读入相关的页面到主存中，然后将控制权重新返回给引用内存的指令，这时就会读到相应的内存地址，顺利执行
终止 当发生无法修复的异常时，比如硬件设备DRAM/SRAM损坏，会导致整个进程终止</description>
    </item>
    
    <item>
      <title>os-数据类型转换</title>
      <link>http://nber1994.github.io/posts/os-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>os-数据类型转换  数据类型转换 较小的数据类型转换为较大的数据类型则在高位添加0 较大的数据类型转化为较大的数据类型时截断  </description>
    </item>
    
    <item>
      <title>os-系统IO</title>
      <link>http://nber1994.github.io/posts/os-%E7%B3%BB%E7%BB%9Fio/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E7%B3%BB%E7%BB%9Fio/</guid>
      <description>os-系统IO  一个应用程序通过要求内核打开相应的文件，来宣告自己要访问一个I/O设备。内核返回一个非负整数，成为文件描述符。内核会记录该描述符的所有信息 Linux shell会给每个进程分配三个文件描述符 0标准输入 1标准输出 2标准错误  文件类型 linux文件类型分为
  普通文件 普通文件包括文本文件和二进制文件
  目录 目录是包含一组链接的文件，其中每个链接都将一个文件名映射到一个文件
  套接字 用来与另一个进程进行跨进程通信的文件
  共享文件 内核如何表示打开的文件  由三个数据结构表示  描述符表 每个进程都有一个文件描述符表，并以文件描述符作为索引 文件表 打开文件的集合是由一张表表示的，所有进程共享这张表，每一个表项包含当前文件的位置，引用计数，以及一个v-node表中对应表项的指针，进程关闭一个文件，表项中的引用计数会减一，当为0时，内核会删除该表项 v-node表 同文件表一样，每个进程共享一张表，每个表项包含stat结构大多数信息，包含了文件的类型和对于文件操作函数的指针    多个文件描述符可以通过不同的表项来引用同一个文件（只要打开同一个文件两次，两个不同的fd）
父子进程共享文件 </description>
    </item>
    
    <item>
      <title>os-虚拟内存</title>
      <link>http://nber1994.github.io/posts/os-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>os-虚拟内存  虚拟内存是一种对主存的抽象  三个重要的功能：  将内存抽象为了磁盘的活动区域的缓存，并可以按照需求换入换出，高效的使用了主存 为每个进程提供了一致的地址空间，方便内存管理 保护每个进程地址空间不被其他进程破坏   虚拟地址需要翻译为物理地址，翻译的组件叫做内存管理单元（MMU），同时需要配合存放在主存中的页表   页表操作的问题  需要判断一个虚拟页是否缓存在主存上，如果有的话还要确定虚拟内存对应的物理地址。 如果不存在的话，还要确定虚拟页存放在磁盘的那个位置，并且在内存中牺牲一个页，并将虚拟也从磁盘复制到主存上，替换掉这个牺牲页  页表条目（PTE）  在页表中每个固定的偏移量都有一个固定的条目  一个PTE由一个有效位和一个n位地址字段组成 有效位标识标识该虚拟也是否被缓存在DRAM中 N位的地址是物理内存页的起始位置，或者是磁盘上的起始位置（未设置有效位）  页命中  地址翻译会根据虚拟内存地址翻译出PTE的索引，并从内存读取它，发现设置了有效位，则直接读取地址拿到虚拟内存  缺页  DRAM不命中则成为缺页 虚拟内存根据地址翻译得到PTE的索引，同时读取标志位，发现未设置，则会触发一个缺页异常，缺页处理程序会选出一个牺牲页，如果牺牲页已经被修改了，内核会把修改写会磁盘。  之后内核会把虚拟页从磁盘读出来，写入主存并更新PTE，之后会返回，将重新启动导致缺页的指令（故障） 磁盘和内存之间传送页的活动叫做换入   虚拟内存作为内存管理工具
 共享内存   即是多个进程的虚拟地址映射到同一个物理内存地址上
  VM简化了
 链接 加载 代码 数据共享 已及应用程序的内存分配     简化链接  每个进程加载到内存中使用的格式都是代码段起始地址为0x40000开始，然后是数据段，堆等等，这样极大地简化了连接器的设计与实现，允许连接器生成完全链接的可执行文件，并且是独立于物理内存中代码和数据的最终位置的  简化加载  简化了加载的步骤，加载器只是为代码和数据段分配好未标记的虚拟页，并不会实际的加载进内存，在被执行时，cpu会按需加载  简化共享   简化共享，按理来说，每个进程都会有独立的内存空间，代码，数据，堆和栈信息都是不共享的，实际的物理地址也都是不重合的，但是难免会有需要共享的场景，比如说c语言库，动态链接库。操作系统安排每个进程中将适当的虚拟地址映射到相同的物理地址上去，节省了内存资源实现了共享内存</description>
    </item>
    
    <item>
      <title>os-链接</title>
      <link>http://nber1994.github.io/posts/os-%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/os-%E9%93%BE%E6%8E%A5/</guid>
      <description>os-链接  编译程序往往需要编译器驱动程序，常用的如GCC，它将调用程序预处理器，编译器，汇编器和链接器   编译过程  程序预处理器将代码文件处理为ascii码的文件main.i 编译器将main.i文件翻译为汇编文件main.s 汇编器将main.s翻译为一个可重定位目标文件 main.o 链接器将main.o和sum.o组合起来，创建一个可执行目标文件 shell调用加载器，加载可执行目标文件，将代码和数据加载到内存中执行  链接器的工作  符号解析 每个符号对应于一个函数，变量等 符号解析做的就是将每个符号引用和符号定义关联起来 重定位 编译器和汇编器生成的是地址从0开始的代码和数据节。链接器通过把每个符号定义和一个内存位置关联起来（会合并不同可重定位目标文件的.data节），然后更新所有这个符号的引用，使其指向这个引用位置 由于ELF加载的方式已经定了，各个节的大小也已经定了，所以链接之后，所有的符号的位置已经定了（虚拟内存地址）  目标文件 Linux中目标文件的格式ELF文件  ELF文件的格式    ELF的头是一个16字节的固定序列，包含一些基本信息，包括目标文件的类型，机器类型，节头部表偏移量
在ELF头和节头部表之间的一些节 .text 已经编译程序的机器代码 .rodata 只读数据 类似于代码中的硬编码 sprintf(‘%s’) .data 已初始化的全局&amp;amp;静态变量 (局部变量在运行时保存在栈中) .bss 未初始化的全局变量&amp;amp;静态变量，以及被声明为0的全局&amp;amp;静态变量
 静态链接库  可执行目标文件 可执行文件包含只读内存段（代码段）和读写内存段（数据段） ELF头中还包含程序的入口点，即第一条指令的地址
 加载可执行目标文件  Shell指令加载ELF文件到内存中，1.将代码段和数据段加载到内存中，并跳转到程序入口点   运行时的内存映像 代码段总是从0x400000地址开始的，之后是数据段 数据段之后是堆，堆后面的内存是为共享模块保留的 用户栈总是从最大的合法地址开始向下延伸，之后的是内核内存
 动态链接共享库  动态链接库在链接器阶段，会引入来更新重定位和符号表信息 在加载器之后，会调用动态链接库来引入代码和数据  ￼  动态链接库是在调用动态库代码时，程序被载入时才计算代码的逻辑地址 这就要求动态库代码是由位置无关代码构成  位置无关代码  链接一个函数时，多个进程都引用同一个函数，每个进程都占用内存，如果可以引用共享内存中的库代码是极好的   动静态链接共享库区别  动态链接库占用空间比静态小，但是会影响程序性能 动态库并不是和可执行文件一起存储在磁盘上，共享代码端一次性加载到共享段中，供所有的进程使用 静态库在链接阶段已经确定了内存位置，动态是在程序加载时才会计算出代码地址 静态库一旦有修改，所有使用的可执行文件都需要重新编译，动态链接则不用  </description>
    </item>
    
  </channel>
</rss>
