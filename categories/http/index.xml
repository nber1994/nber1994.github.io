<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on jingtianyou&#39;s blog</title>
    <link>http://nber1994.github.io/categories/http/</link>
    <description>Recent content in http on jingtianyou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 09 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://nber1994.github.io/categories/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>https基础知识</title>
      <link>http://nber1994.github.io/posts/https%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/https%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description> 公钥&amp;amp;私钥 公钥用来加密，私钥用来解迷
 http的问题  明文传输，可能导致信息被窃听 不互相验证身份，可能导致伪装 不校验报文的完整性，可能被篡改  https 在表示层增加stl&amp;amp;CA来进行加密  首先进行非对称加密（较耗费性能）  c请求s，s返回证书&amp;amp;公钥 c请求CA来验证证书（CA地址一般内置操作系统） 验证成功，则生成一个随机串，通过公钥加密传递给s   然后进行对称加密  s通过私钥解迷，拿到随机串 通过随机串加密响应结果，返回    </description>
    </item>
    
    <item>
      <title>http基础知识</title>
      <link>http://nber1994.github.io/posts/http%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/http%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>http  http是无状态的协议 为了保持http的状态，引入了cookie 请求报文结构  响应报文结构   http方法  get  获取资源   post  传输实体   put  传输文件   head  获取报文首部   delete  删除文件   options  获取url支持的方法   trace  将到达web服务器之前的通信节点换回给客户端 max-forward首部字段填入数值，每经过一个服务器该值就减一，当减为0时停止传输，并就地返回200 ok    持久连接节省通信量  keep-alive  一个页面上会有多个需要http请求的资源 如果每个资源都会建立和断开tcp连接，增加网络开销 因此增加了keep-alive的方法，只要任一端没有明确断开连接，就会一直保持连接   pipline  keep alive方法使得管线化成为可能 之前一个http请求完成之后，才会请求下一个http请求 管线化则同时发生多个请求，比持久化连接更快    使用cookie记录状态  客户端会根据服务端返回的响应报文中的set-cookie的首部字段，来保存cookie 当再次发生请求给服务端时，会将cookie一并发送给服务端    响应报文   请求报文</description>
    </item>
    
  </channel>
</rss>
