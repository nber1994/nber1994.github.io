<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tcp/ip on jingtianyou&#39;s blog</title>
    <link>http://nber1994.github.io/categories/tcp/ip/</link>
    <description>Recent content in tcp/ip on jingtianyou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="http://nber1994.github.io/categories/tcp/ip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tcp怎么保证可靠传输</title>
      <link>http://nber1994.github.io/posts/tcp%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/tcp%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</guid>
      <description> 确认机制和超时重传  收到消息后会恢复ack来确认到达，如果一段时间后未收到ack则会重传   数据校验和  tcp的报文头有校验和，校验是否损坏   排序  接收方会根据顺序来进行排序，将先到的数据缓存起来，等待之前的包到达后才发送给应用   流量控制  可以根据接收方的接收能力来调整滑动窗口的大小   拥塞控制  当网络情况不好的时候，可以调整滑动窗口的大小来防止丢包    延伸  拆包和粘包 拆包就是说，发送方一次发送的数据，接收方可能两次才能收到  发送的大小大于了IP包的大小 发送过急，大于发送缓冲区剩余大小   粘包，接收方读取一次数据，接收到了发送方两次发送的内容  发送缓冲区未满，一次将多个包发出 接收太慢，缓冲区满了，一次读取多个包   解决方案  为每个包增加长度信息 将所有的包封装为固定长度 包之间设置边界    </description>
    </item>
    
    <item>
      <title>tcp与udp区别</title>
      <link>http://nber1994.github.io/posts/tcp%E4%B8%8Eudp%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/tcp%E4%B8%8Eudp%E5%8C%BA%E5%88%AB/</guid>
      <description>tcp和ip是互相互补的
 TCP协议 tcp基于字节流的传输层协议，位于应用层之下，完成的是IP协议完成不了的可靠传输
IP协议 IP协议是不可靠的，负责在原地址和目的地址之间传输，他只关心跨越本地网络边界问题，寻址和路由
分层  应用层  http ftp telnet dns   传输层  tcp udp   网络层  IP 负责路由寻址 ARP 地址解析协议获取统一物理网络中的物理地址 ICMP 控制消息协议 传送错误和控制信息 IGMP 组管理协议 用来实现本地广播   数据链路层   tcp/ip或者udp/ip中，唯一确认一个连接为五个元素  源IP 源端口号 协议 目的IP 目的端口号    端口号  既定端口号  telnet 23 ssh 22 fpt 21 http 80 mysql 3306 redis 6379   时序分配  交给操作系统进行分配    udp  无连接 没有流量控制 不保证包的顺序性  应用场景  即时通信 广播通信 包总量较少通信  tcp  充分实现了数据传输时的各种控制功能  丢包重传 分包保持顺序 面向连接    通过序列号和确认应答提高可靠性 确认应答  接受端收到消息后会返回一个已经收到的消息通知，叫做ACK 如果收到的消息不理解则会返回一个NACK 发送端发送一段时间之后没有收到ACK消息，则可以认定数据已经丢失，并进行重发  但是没有收到ACK也并不代表消息没有到达，也有可能是ack丢失  这种情况下也会导致发送端以为数据没有到达，进行重发 这种情况下，即使ack返回延迟了，发送端仍会重发包，而对于接收端来说  会受到重复数据，需要对数据进行去重      序列号  确认应答处理，重发控制，重复控制 序列号为每一个字节添加一个编号 接收端查询接收数据首部的序列号和数据长度，并将自己下一步应该接收的序号作为应答返回 通过序列号和确认应答号，实现可靠传输   重发超时如何确定  理想是找到一个最小时间，保证在该段时间内确认包一定能返回 但是该时间会根据网络情况不同而不同 每次发包都会计算往返时间和偏差 重发时间就是往返时间加上偏差时间稍微大一点 一般超时重发时间都是0.</description>
    </item>
    
    <item>
      <title>一次tcp的交互细节</title>
      <link>http://nber1994.github.io/posts/tcp%E4%BA%A4%E4%BA%92%E7%BB%86%E8%8A%82/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://nber1994.github.io/posts/tcp%E4%BA%A4%E4%BA%92%E7%BB%86%E8%8A%82/</guid>
      <description>抓了一次tcp相关的交互细节，包括了建立连接，数据传输，断开连接
 11:03:11.802351 IP localhost.42740 &amp;gt; localhost.distinct: Flags [S], seq 2760393548, win 65495, options [mss 65495,sackOK,TS val 1215514771 ecr 0,nop,wscale 7], length 0 0x0000: 4500 003c 0bdf 4000 4006 30db 7f00 0001 E..&amp;lt;..@.@.0..... 0x0010: 7f00 0001 a6f4 270f a488 434c 0000 0000 ......&amp;#39;...CL.... 0x0020: a002 ffd7 0923 0000 0204 ffd7 0402 080a .....#.......... 0x0030: 4873 4893 0000 0000 0103 0307 HsH......... 11:03:11.802403 IP localhost.distinct &amp;gt; localhost.42740: Flags [S.], seq 1911463751, ack 2760393549, win 65483, options [mss 65495,sackOK,TS val 1215514771 ecr 1215514771,nop,wscale 7], length 0 0x0000: 4500 003c 0000 4000 4006 3cba 7f00 0001 E.</description>
    </item>
    
  </channel>
</rss>
